Tokenizer.c takes from terminal user input a string and breaks the string down into tokens, each token is then outputted along with what kinda token it is (INTEGER, ALPHANUMERIC, FLOAT, etc...) Our tokenizer.c implements the various mandatory states given in the PDF as well as the extra credit states. Each token is adjacent or seperated by white space. We tried our best to emulate what this project seemed to be based off of which is a complier scanner. Even the terminology is very similar (tokens). 
For our program we decided to not use any type of backtracking/forwardtracking functions which meant our pointer could only make a decision based on the state and the current character it was pointing to. "100." would be an error because at '.' the code would expect this to be a float (as it can not look forward to determine whether it is an integer or float), upon leaving the '.' and moving to '\0', tokenizer will believe this token is malformed. 
Comments of both multiline and single line flavors are also ignored, Multiline quotes "/*" are assumed to be until end of file or when a closing quote "*/" is found. Single quotes "//" are assumed to continue until end of file or a new line is detected, to which new tokens will be created. 
