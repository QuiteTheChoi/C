/*
 * tokenizer.c
 */
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

/*
 * Tokenizer type.  You need to fill in the type as part of your implementation.
 */
 
 enum states {				
	undetermined,			//The begining of a token
	malformed,				
	int_float,				//final state (Integer) if no malformed char or '.' or 'e' is found. 
	oct_hex_float_zero,
	mightBeOct,				//Is the final state if no malformed character is found.
	mightBeHex, 			//Is the final state if no malformed character is found.
	mightBeHexFirst,
	mightBeFloatAfterDot,	//Is the final state if no malformed character is found, state can change if an 'e' is found
	mightBeFloat,
	mightBeFloat_onlyints_neg_pos, 
	mightBeFloat_onlyints,   //Is the final state if no malformed character is found after a negative or positive is found
	mightBeFloat_FirstInt,
	isAlphaNumeric, //Once a letter is found, it will be a word no matter what.
	spacesBlah,
	done,
	reallyFinished,
	mightBeLArrow,
	isLessThanEqual,
	mightBeLShift,
	isLShiftEqual,
	mightBeRArrow,
	isGreaterThanEqual,
	mightBeRShift,
	isRShiftEqual,
} curr_State, temp_State;

char err;
char* pc;
int onlySpaces = 0;
int end;

struct TokenizerT_ {
	int i;   			//Index number used later for creating tokens
	int stringSize;		//String size for getnexttoken function	
	char *myString;		//input string
};

typedef struct TokenizerT_ TokenizerT;

/*
 * TKCreate creates a new TokenizerT object for a given token stream
 * (given as a string).
 * 
 * TKCreate should copy the arguments so that it is not dependent on
 * them staying immutable after returning.  (In the future, this may change
 * to increase efficiency.)
 *
 * If the function succeeds, it returns a non-NULL TokenizerT.
 * Else it returns NULL.
 *
 * You need to fill in this function as part of your implementation.
 */

TokenizerT *TKCreate( char * ts ) {
	char copy[strlen(ts)]; 					//copy of string ts
	strcpy(copy,ts);  
	
	TokenizerT *ptr = (TokenizerT*) malloc (sizeof(struct TokenizerT_));   //Allocation of size for TokenizerT_
	ptr -> i = 0;		
	ptr -> stringSize = strlen(copy);	
	ptr -> myString = strdup(copy);
	
	pc = (ptr -> myString);
	
	return ptr;           /*returning the pointer*/
}

/*
 * TKDestroy destroys a TokenizerT object.  It should free all dynamically
 * allocated memory that is part of the object being destroyed.
 *
 * You need to fill in this function as part of your implementation.
 */

void TKDestroy( TokenizerT * tk ) {
}


//beginning of all states and function calls for states

/*set the global char to the malform char of token*/
int malChar(char ptr) {
	err = ptr;
	return 0;
}

int chkAfterLeft(char x) {
	if (x == '=') {
		curr_State = isLessThanEqual;
		temp_State = curr_State;
	}
	else if (x == '<') {
		curr_State = mightBeLShift;
	}
	else {
		temp_State = curr_State;
		curr_State = done;
	}
	return 0;	
}

int chkLShift(char x) {
	if (x == '=') {
		curr_State = isLShiftEqual;
		temp_State = curr_State;
	}
	else {
		temp_State = curr_State;
		curr_State = done;
	}
	return 0;
}

int chkAfterRight(char x) {
	if (x == '=') {
		curr_State = isGreaterThanEqual;
		temp_State = curr_State;
	}
	else if (x == '>') {
		curr_State = mightBeRShift;
	}
	else {
		temp_State = curr_State;
		curr_State = done;
	}
	return 0;	
}

int chkRShift(char x) {
	if (x == '=') {
		curr_State = isRShiftEqual;
		temp_State = curr_State;
	}
	else {
		temp_State = curr_State;
		curr_State = done;
	}
	return 0;
}

/* this will check whether or not the first character of token is a valid char of 
 * (1-9), '-' (this will be int or float), '0' (which will be float, hex, oct or zero state) or a letter (word) or a malformed character. */
int isZeroLetterOrNot(char x) {
	if (x == '0') {
		curr_State = oct_hex_float_zero;
	}
	else if (x > '0' && x <= '9') {
		curr_State = int_float;
	}
	else if (x == '.') {
		curr_State = mightBeFloatAfterDot;
	}	
	else if ((x >= 'a' && x <= 'z')||(x >= 'A' && x <= 'Z')) {
		curr_State = isAlphaNumeric;
	}
	else if (x == '<') {
		curr_State = mightBeLArrow;
	}
	else if (x == '>') {
		curr_State = mightBeRArrow;
	}
	else {
		curr_State = malformed;
		temp_State = malformed;
		malChar(x);
	}
	
	return 0;
}

/* if isZeroLetterOrNot determines that it could be a hex, float, oct or zero, 
 * this will determine if the next char is a 'x' or 'X' for hex, (0-7) for oct
 * or '.' for float and malform for all other characters. 'e' will not make it a 
 * float as the previous state was determined from to be a '0', "0e" should not be valid. */
int isOctHexOrFloat(char x) {
	if (x >= '0' && x <= '7') {
		curr_State = mightBeOct;
	}
	else if (x == 'x' || x == 'X') { 
		curr_State = mightBeHexFirst;
	}
	else if (x == '.') {
		curr_State =  mightBeFloatAfterDot;
	}
	else if (x == '\0') {
		curr_State =  reallyFinished;
	}
	else {
		curr_State = malformed;
		temp_State = malformed;
		malChar(x);
	}
	
	return 0;
}

/*This will change the state from mightBeOct to malform
 * if anything besides (0-7) is found*/
int isOctal(char x) {				
	if (x >= '0' && x <= '7') {
	}
	else {
		temp_State = curr_State;
		curr_State = done;		
	}
	return 0;
}

/*This will change the state from mightBeHex to malform
 * if anything besides (0-9), (a-f) or (A-F) is found is found*/
int isHex(char x) {
	if ((x >= '0' && x <= '9') || (x >= 'a' && x <= 'f') || (x >= 'A' && x <= 'F')) {
		}
	else {
		temp_State = curr_State;
		curr_State = done;		
	}
	return 0;
}

/*This will change the state from mightBeHexFirst to mightBeHex if the char
 * immediately after "0x" is valid hex number, else malformed. 
 * if anything besides (0-9), (a-f) or (A-F) is found is found*/
int isHexFirst(char x) {
	if ((x >= '0' && x <= '9') || (x >= 'a' && x <= 'f') || (x >= 'A' && x <= 'F')) {
		curr_State = mightBeHex;
		}
	else {
		curr_State = malformed;	
		temp_State = malformed;
		malChar(x);	
	}
	return 0;
}

/*This is for a float that consists of an 'e' and '+' or '-', the only thing left that 
 * should be found is integers, if not, malform state*/
int isDigit(char x) {
	if (x >= '0' && x <= '9') {
	}
	else {
		temp_State = curr_State;
		curr_State = done;
	}
	return 0;
}

/*This is for a float that consists of an 'e' and '+' or '-', the next char must be a number from 1 - 9
 * if not, malform state*/
int isDigitFloatFirst(char x) {
	if (x >= '1' && x <= '9') {
		curr_State = mightBeFloat_onlyints;
	}
	else {
		curr_State = malformed;
		temp_State = malformed;
		malChar(x);
	}
	return 0;
}

/*This will determine if a token is an integer or float, the 
 * possible values for integer are (0-9), '.', 'e', 'E' will change the 
 * state appropriately */
int isDigitDotOrE (char x) {
	if (x == '.') {
		curr_State = mightBeFloatAfterDot;
	}
	else if (x == 'e' || x == 'E') {
		curr_State = mightBeFloat_onlyints_neg_pos;
	}
	else if (x >= '0' && x <= '9') {
		//printf("%c\n",x);
	}
	else {
		temp_State = curr_State;
		curr_State = done;
		//printf("%c\n",x);
	}
	return 0;
}

/* This is called after a token is determined to be a float 
 * because a '.' has been found, only digits should be found after a '.' */
 int isDigitNotE(char x) {
	if (x >= '0' && x <= '9') {
		curr_State = mightBeFloat;
	}
	else {
		curr_State = malformed;
		temp_State = malformed;
		malChar(x);
	}
	return 0;
}
 
 /* This is called after a token is determined to be a float 
 * because a '.' and a number has been found and not an e afterwards, only digits and 'e' can be found after the first '.' */
int isDigitOrE(char x) {
	if (x >= '0' && x <= '9') {
		curr_State = mightBeFloat;
	}
	else if (x == 'e' || x == 'E'){
		curr_State = mightBeFloat_onlyints_neg_pos;
	}
	else {
		temp_State = curr_State;
		curr_State = done;
	}
	return 0;
}

/* This is called after a possible float token has an 'e'
 * the only possible char after this e is digits or a negative or positive sign */
int isDigitOrSign(char x) {
	if (x >= '1' && x <= '9') {
		curr_State	=  mightBeFloat_onlyints;
		
	}
	else if (x == '-' || x == '+') {
		curr_State = mightBeFloat_FirstInt;
	}
	else {
		curr_State = malformed;
		temp_State = malformed;
		malChar(x);
	}
	return 0;
}

/*This function will check if the next character after the
 * first character in a word token is valid, if it is not
 * state becomes undetermined again*/
 
int isAlphaNumericOrNot(char x) {
	if (isalnum(x)) {
	}
	else {
		temp_State = curr_State;
		curr_State = done;
	}
	return 0;
}

/*
 * TKGetNextToken returns the next token from the token stream as a
 * character string.  Space for the returned token should be dynamically
 * allocated.  The caller is responsible for freeing the space once it is
 * no longer needed.
 *
 * If the function succeeds, it returns a C string (delimited by '\0')
 * containing the token.  Else it returns 0.
 *
 * You need to fill in this function as part of your implementation.
 */

char *TKGetNextToken( TokenizerT * tk ) {
	if (*pc == '\0') {
		exit (0);
	}
	
	char* token = (char*) malloc (((tk -> stringSize)+2)*sizeof(char));
	char* tempToken = (char*) malloc(sizeof(char*));	
	tempToken = token;
	
	while (isspace(*pc)) {
		pc++;
	}
		
	if (*pc == '\0') {
		exit (0);
	}
	
	onlySpaces++;			//only if a nonspace is found;
	
	//printf("%chere\n",*pc);
	curr_State = undetermined;
	
	if (curr_State == undetermined) 
		//printf("JIIIIIIIIIII");
	
	while (*pc != '\0') {
		if ((curr_State != done)&&(curr_State != undetermined)) {
			*token = *pc;
			pc++;
			token++;
		}
		switch(curr_State) {
			case (malformed): {     /*temporary*/
				*token = '\0';
				return tempToken;
			}
			case (undetermined): {
				isZeroLetterOrNot(*pc);
				//printf("UNDETERMINED STATE: %c\n",*pc);		
				break;
			}
			case (spacesBlah): {
				break;
			}
			case (mightBeRArrow): {
				chkAfterRight(*pc);
				break;
			}
			case (mightBeRShift): {
				chkRShift(*pc);
				break;
			}
			case (isGreaterThanEqual): {
				*token = '\0';
				return tempToken;
			}
			case (isRShiftEqual): {
				*token = '\0';
				return tempToken;
			}
			case (mightBeLArrow): {
				chkAfterLeft(*pc);
				break;
			}
			case (mightBeLShift): {
				chkLShift(*pc);
				break;
			}
			case (isLessThanEqual): {
				*token = '\0';
				return tempToken;
			}
			case (isLShiftEqual): {
				*token = '\0';
				return tempToken;
			}
			case (oct_hex_float_zero): {
				isOctHexOrFloat(*pc);
				break;
			}
			case (mightBeOct): {
				isOctal(*pc);
				break;
			}
			case (mightBeHex): {
				isHex(*pc);
				break;
			}
			case (mightBeHexFirst): {
				isHexFirst(*pc);
				break;
			}
			case (mightBeFloatAfterDot): {
				isDigitNotE(*pc);
				break;
			}
			case (mightBeFloat): {
				isDigitOrE(*pc);
				break;
			}
			case (mightBeFloat_onlyints_neg_pos): {
				isDigitOrSign(*pc);
				break;
			}
			case (mightBeFloat_onlyints): {
				isDigit(*pc);
				break;
			}
			case (mightBeFloat_FirstInt): {
				isDigitFloatFirst(*pc);
				break;
			}
			case (int_float): {
				isDigitDotOrE(*pc);
				//printf("The int here is %c\n",*pc);
				break;
			}
			case (isAlphaNumeric): {
				isAlphaNumericOrNot(*pc);
				break;
			}
			case (done): {
				*token = '\0';
				return tempToken;
			}
			case (reallyFinished): {
				return 0;
			}
			default:
			break;
		}
	}
	*token = '\0';
	return tempToken;
}

char* TKGetState() {
	switch (temp_State) {
		case(malformed): {
			return "ERROR";
			break;
		}
		case(mightBeFloatAfterDot): {
			return "ERROR";
			break;
		}
		case (oct_hex_float_zero): {
			return "ZERO";
			break;
		}
		case (mightBeOct): {
			return "OCTAL";
			break;
		}
		case (mightBeHex): {
			return "HEXADECIMAL";
			break;
		}
		case (mightBeFloat): {
			return "FLOAT";
			break;
		}
		case (mightBeFloat_onlyints_neg_pos): {
			return "FLOAT";
			break;
		}
		case (mightBeFloat_onlyints): {
			return "FLOAT";
			break;
		}
		case (int_float): {
			return "INTEGER";
			break;
		}
		case (isAlphaNumeric): {
			return "WORD";
			break;
		}
		case (mightBeRArrow): {
			return "GREATER THAN";
			break;
		}
		case (isGreaterThanEqual): {
			return "GREATER OR EQUAL";
			break;
		}
		case (mightBeRShift): {
			return "BITWISE RIGHT SHIFT";
			break;
		}
		case (isRShiftEqual): {
			return "BITWISE RIGHT SHIFT ASSIGNMENT";
			break;
		}
		case (mightBeLArrow): {
			return "LESS THAN";
			break;
		}
		case (isLessThanEqual): {
			return "LESS OR EQUAL";
			break;
		}
		case (mightBeLShift): {
			return "BITWISE LEFT SHIFT";
			break;
		}
		case (isLShiftEqual): {
			return "BITWISE LEFT SHIFT ASSIGNMENT";
			break;
		}
		default:
		break;
	}
	return 0;
}


/*
 * main will have a string argument (in argv[1]).
 * The string argument contains the tokens.
 * Print out the tokens in the second string in left-to-right order.
 * Each token should be printed on a separate line.
 */

int main(int argc, char **argv) {
	if (argc == 1 || argv[1][0] == '\0') {									//in case no arguments are given
		fprintf(stdout,"No arguments given!\n");
		return 0;
	}
		
	TokenizerT *tokenizer = TKCreate (argv[1]);        //creation of tokenizerT
	
	curr_State = undetermined;
	
	//printf("%s\n",tokenizer -> myString);
	char* token;
	
	/*if (onlySpaces == 0) {
		fprintf(stderr,"Only white spaces entered\n");
		return 0;
	}
	
	char *status;*/
	
	while (token != 0) { 
		token = TKGetNextToken(tokenizer);
		char* status = TKGetState();
		fprintf(stdout,"%s: %s\n",status,token);
		if (temp_State == malformed) {
		fprintf(stdout,"Error caused by: [0x%x]\n",err);
		}			
	}
	
	/*free (token);
	TKDestroy(tokenizer);*/
				
	return 0;
}
